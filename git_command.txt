git config --global user.name "Name"                  создать пользователя
git config --global user.email "name@mail.ru"
git config --list                                     посмотреть настройки
git init                                              создать репозиторий
git clone /address  new_adress_name   adress/http://)     клонировать репозиторий
git add name_file									Добавить файл в index
git commit -m "commit"  							добавить коммит(файл сохранить)
git status -s  (shot)
file .gitignore      внести файлы которые должны игнорироватся 
git diff             посмотреть что изменялось в файлах
git diff --staged  	Изменения которые попадут в коммит
git diff --cached    тоже что и staged
git rm name_file     удалить файл из из индекса если файл был изменени ключ F
git rm  name_file -f
git rm Name_file --cached     удалит из индекса но не удаляет с диска
git mv name_file new_name_file    перименование файла фактичк=ески rm end add
git log -2 покажет два последних коммита
git log -1 последний соммит
git log -p -1 (patch) что именно сделанно в коммите
git log --stat статистика
git log --prytty=shot    commit
git log --prytty=oneline
git log --oneline 
git log --oneline --graph ветвления
git log --prytty=format:"%h - %an %cd %s"
git log --since=2020-08-23
git log --author=name
git log --all-match по всем авторам
git log --grep=readme по содержимому коментариев
git log --oneline --decorate --graph
git log --oneline --graph --all (all)показывает псевдо графику веток
git commit --amend отмена последнего коммита
git commit --amend -m "commit"
git reset HEAD name_file   отмена добавления в индекс
git restore --staged name_file тоже отмена 
git checkout -- name_file можно использовать для отмены изменений в файле
git checkout name_tag перейти на метку
git checkout --force принудительно перейти на ветку потеряв изменения
git merge name_branch -мердженг ветки забрать файлы
git merge --about отменить мердженг
git checkout -b name_branch создать ветку и перйти на нее
git restore name_file тоже отменяет изменения в файлах
git restore :/ востановить все дерево
git restore --source=HEAD --staged --worktree name_file source-от куда востановить worktree-востановить на диске
git tag список меток
git tag "name_tag(v2)" создать метку
git show показать метки
git tag -a v3.0 -m "version with3" метка полная ананированая
git tag -l "v_name"
git tag -d name_tag удалить метку
git tag push origin --tags принудительно передать метки в удаленный репозиторий
git branch name создать ветку
git branch -D(-d) name_branch

git mergetool стороняя утилита для конфликтов Diff3

git stash  переключится если есть изменения но не закоммичены а надо переключится
git stash pop вернутся обратно
git diff изменения рабочей папки относительно последнего коммита не включает изменения в индексе
git diff --cached
git diff name_branch end name_branch
git cherry-pick id_commit -m забрать изменения из определенного коммита
git switch -c name_branch востановить ветку не всегда работает git checkout -b
git rebase name_branch перебазировать ветку(поменять родителя)

git rebase --onto master server cllient для удаленного сервера
git rebase --continue кода разрешены все конфликты
		   --about    если не разрешены конфликты
		   
git clone копирование репозитория		   
git remote -v посмотреть ссылку	
git remote add pb https:/github.com
git daemon --verbose --export-all --base-patch=/c/git0823/	

если не делается git push на сервере выполнить chown -R myuser:myuser /var/repo/progect.git


git push запушить изменения
git pull забрать изменения 

git daemon --verbose --export-all --base-patch=/c/git/server

git merge origin/master изменения разрешить конфликт потом git push

test commit
